$date
	Tue Jan 15 12:33:29 2019
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module alu_tb $end
$var wire 32 ! aluout [31:0] $end
$var reg 32 " aluin1 [31:0] $end
$var reg 32 # aluin2 [31:0] $end
$var reg 4 $ funct_alu [3:0] $end
$scope module test $end
$var wire 32 % aluin1 [31:0] $end
$var wire 32 & aluin2 [31:0] $end
$var wire 4 ' funct_alu [3:0] $end
$var wire 32 ( aluout [31:0] $end
$scope function calc $end
$var reg 32 ) aluin1 [31:0] $end
$var reg 32 * aluin2 [31:0] $end
$var reg 32 + calc [31:0] $end
$var reg 4 , funct_alu [3:0] $end
$upscope $end
$upscope $end
$scope task assert_calc $end
$var reg 32 - a [31:0] $end
$var reg 32 . b [31:0] $end
$var reg 80 / message [0:79] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx /
bx .
bx -
b0 ,
b0 +
b0 *
b0 )
b0 (
b0 '
b0 &
b0 %
b0 $
b0 #
b0 "
b0 !
$end
#1
b100001 !
b100001 (
b100001 +
b1010 *
b10111 )
b1010 #
b1010 &
b10111 "
b10111 %
#3
b10000010100010001000100 /
b100001 .
b100001 -
#4
b1101 !
b1101 (
b1101 +
b1000 ,
b1000 $
b1000 '
#5
b10100110101010101000010 /
b1101 .
b1101 -
#6
b101110000000000 !
b101110000000000 (
b101110000000000 +
b1 ,
b1 $
b1 '
#7
b101001101001100010011000010111101010011010011000100110001001001 /
b101110000000000 .
b101110000000000 -
#8
b1001 ,
b1001 $
b1001 '
#10
b11101 !
b11101 (
b11101 +
b100 ,
b100 $
b100 '
#11
b10110000100111101010010 /
b11101 .
b11101 -
#12
b1100 ,
b1100 $
b1100 '
#14
b11111 !
b11111 (
b11111 +
b110 ,
b110 $
b110 '
#15
b100111101010010 /
b11111 .
b11111 -
#16
b1110 ,
b1110 $
b1110 '
#18
b10 !
b10 (
b10 +
b111 ,
b111 $
b111 '
#19
b10000010100111001000100 /
b10 .
b10 -
#20
b1111 ,
b1111 $
b1111 '
#22
b1 !
b1 (
b1 +
b11 *
b10000000000000000000000000010101 )
b11 #
b11 &
b10000000000000000000000000010101 "
b10000000000000000000000000010101 %
#23
b10000000000000000000000000010 !
b10000000000000000000000000010 (
b10000000000000000000000000010 +
b101 ,
b101 $
b101 '
#24
b101001101010010010011000010111101010011010100100100110001001001 /
b10000000000000000000000000010 .
b10000000000000000000000000010 -
#25
b11110000000000000000000000000010 !
b11110000000000000000000000000010 (
b11110000000000000000000000000010 +
b1101 ,
b1101 $
b1101 '
#26
b101001101010010010000010010111101010011010100100100000101001001 /
b11110000000000000000000000000010 .
b11110000000000000000000000000010 -
#27
b11111111111111111100000000000000 !
b11111111111111111100000000000000 (
b11111111111111111100000000000000 +
b10000000000000000000000000010001 *
b10000000000000000000000000010001 #
b10000000000000000000000000010001 &
#29
b11111111111111111100000000000000 .
b11111111111111111100000000000000 -
#30
b11000000000000000000000000001010 !
b11000000000000000000000000001010 (
b11000000000000000000000000001010 +
b10000000000000000000000000000001 *
b10000000000000000000000000000001 #
b10000000000000000000000000000001 &
#32
b11000000000000000000000000001010 .
b11000000000000000000000000001010 -
#33
b11110000000000000000000000000010 !
b11110000000000000000000000000010 (
b11110000000000000000000000000010 +
b11 *
b11 #
b11 &
#34
bx !
bx (
bx +
b11 ,
b11 $
b11 '
#35
b1111000011110000111100001111000 /
bx .
bx -
